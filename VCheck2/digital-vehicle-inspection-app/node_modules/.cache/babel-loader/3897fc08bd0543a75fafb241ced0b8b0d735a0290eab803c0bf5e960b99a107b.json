{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semicolon\\\\Desktop\\\\VCheck2\\\\digital-vehicle-inspection-app\\\\src\\\\components\\\\Inspector\\\\ScanPlate.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\n\n// Add this interface for scan history items\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScanPlate = () => {\n  _s();\n  const [plateNumber, setPlateNumber] = useState('');\n  const [verificationResult, setVerificationResult] = useState(null);\n  const [scanMethod, setScanMethod] = useState('manual');\n  const [cameraActive, setCameraActive] = useState(false);\n  const [isValidPlate, setIsValidPlate] = useState(null);\n  const [capturedImage, setCapturedImage] = useState(null);\n  const [userEnteredPlate, setUserEnteredPlate] = useState('');\n  const [scanHistory, setScanHistory] = useState(() => {\n    // Initialize from localStorage if available\n    const saved = localStorage.getItem('scanHistory');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Enhanced plate validation\n  const PLATE_REGEX = /^[A-Z]{1,3}[ -]?\\d{1,4}[A-Z]?$/i;\n  const validatePlateNumber = plate => {\n    if (!plate) return false;\n    const cleanPlate = plate.replace(/[ -]/g, '');\n    const patternValid = PLATE_REGEX.test(plate);\n    const hasLetters = /[A-Z]/i.test(cleanPlate);\n    const hasNumbers = /\\d/.test(cleanPlate);\n    const minLength = cleanPlate.length >= 4;\n    return patternValid && hasLetters && hasNumbers && minLength;\n  };\n\n  // Add to history function\n  const addToHistory = (plate, status, message) => {\n    const newItem = {\n      id: Date.now().toString(),\n      plateNumber: plate,\n      timestamp: new Date(),\n      status,\n      message\n    };\n    const updatedHistory = [newItem, ...scanHistory];\n    setScanHistory(updatedHistory);\n    localStorage.setItem('scanHistory', JSON.stringify(updatedHistory));\n  };\n\n  // Clean up camera\n  useEffect(() => {\n    return () => {\n      var _videoRef$current;\n      if ((_videoRef$current = videoRef.current) !== null && _videoRef$current !== void 0 && _videoRef$current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Camera initialization\n  useEffect(() => {\n    if (scanMethod === 'camera' && cameraActive) {\n      const startCamera = async () => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: {\n              facingMode: 'environment'\n            }\n          });\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        } catch (err) {\n          console.error('Camera error:', err);\n          setVerificationResult('Camera access denied. Using manual entry.');\n          setScanMethod('manual');\n          setCameraActive(false);\n        }\n      };\n      startCamera();\n    }\n  }, [scanMethod, cameraActive]);\n  const captureImage = () => {\n    if (videoRef.current && canvasRef.current) {\n      const context = canvasRef.current.getContext('2d');\n      if (context) {\n        canvasRef.current.width = videoRef.current.videoWidth;\n        canvasRef.current.height = videoRef.current.videoHeight;\n        context.drawImage(videoRef.current, 0, 0);\n        const imageUrl = canvasRef.current.toDataURL('image/jpeg');\n        setCapturedImage(imageUrl);\n        setVerificationResult(\"Processing image...\");\n        setTimeout(() => {\n          setVerificationResult(\"Please confirm the plate number\");\n          setUserEnteredPlate('');\n        }, 1500);\n      }\n    }\n  };\n  const handleManualInput = e => {\n    const value = e.target.value.toUpperCase();\n    setPlateNumber(value);\n    setVerificationResult(null);\n    setIsValidPlate(validatePlateNumber(value));\n  };\n  const handleManualCorrection = e => {\n    setUserEnteredPlate(e.target.value.toUpperCase());\n  };\n  const confirmPlateNumber = () => {\n    if (userEnteredPlate) {\n      setPlateNumber(userEnteredPlate);\n      setIsValidPlate(validatePlateNumber(userEnteredPlate));\n      setVerificationResult(null);\n    }\n  };\n  const handleScan = () => {\n    if (!plateNumber.trim()) {\n      const errorMsg = 'Please enter a plate number';\n      setVerificationResult(errorMsg);\n      setIsValidPlate(false);\n      addToHistory('', 'rejected', errorMsg);\n      return;\n    }\n    const isValid = validatePlateNumber(plateNumber);\n    setIsValidPlate(isValid);\n    if (!isValid) {\n      const errorMsg = 'Invalid plate number format';\n      setVerificationResult(errorMsg);\n      addToHistory(plateNumber, 'rejected', errorMsg);\n      return;\n    }\n    setVerificationResult(\"Verifying plate...\");\n    setTimeout(() => {\n      const successMsg = `Vehicle ${plateNumber} verified successfully`;\n      setVerificationResult(successMsg);\n      addToHistory(plateNumber, 'verified', successMsg);\n    }, 1000);\n  };\n  const toggleCamera = () => {\n    setCameraActive(!cameraActive);\n    if (!cameraActive) {\n      setPlateNumber('');\n      setCapturedImage(null);\n      setIsValidPlate(null);\n      setVerificationResult(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Vehicle Plate Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 9\n  }, this);\n};\n_s(ScanPlate, \"B5OXucPVjirDLWXs0fDFng7Z2+A=\");\n_c = ScanPlate;\nexport default ScanPlate;\nvar _c;\n$RefreshReg$(_c, \"ScanPlate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","ScanPlate","_s","plateNumber","setPlateNumber","verificationResult","setVerificationResult","scanMethod","setScanMethod","cameraActive","setCameraActive","isValidPlate","setIsValidPlate","capturedImage","setCapturedImage","userEnteredPlate","setUserEnteredPlate","scanHistory","setScanHistory","saved","localStorage","getItem","JSON","parse","videoRef","canvasRef","PLATE_REGEX","validatePlateNumber","plate","cleanPlate","replace","patternValid","test","hasLetters","hasNumbers","minLength","length","addToHistory","status","message","newItem","id","Date","now","toString","timestamp","updatedHistory","setItem","stringify","_videoRef$current","current","srcObject","stream","getTracks","forEach","track","stop","startCamera","navigator","mediaDevices","getUserMedia","video","facingMode","err","console","error","captureImage","context","getContext","width","videoWidth","height","videoHeight","drawImage","imageUrl","toDataURL","setTimeout","handleManualInput","e","value","target","toUpperCase","handleManualCorrection","confirmPlateNumber","handleScan","trim","errorMsg","isValid","successMsg","toggleCamera","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Inspector/ScanPlate.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\n\n// Add this interface for scan history items\ninterface ScanHistoryItem {\n  id: string;\n  plateNumber: string;\n  timestamp: Date;\n  status: 'verified' | 'rejected';\n  message: string;\n}\n\nconst ScanPlate: React.FC = () => {\n    const [plateNumber, setPlateNumber] = useState('');\n    const [verificationResult, setVerificationResult] = useState<string | null>(null);\n    const [scanMethod, setScanMethod] = useState<'camera' | 'manual'>('manual');\n    const [cameraActive, setCameraActive] = useState(false);\n    const [isValidPlate, setIsValidPlate] = useState<boolean | null>(null);\n    const [capturedImage, setCapturedImage] = useState<string | null>(null);\n    const [userEnteredPlate, setUserEnteredPlate] = useState('');\n    const [scanHistory, setScanHistory] = useState<ScanHistoryItem[]>(() => {\n        // Initialize from localStorage if available\n        const saved = localStorage.getItem('scanHistory');\n        return saved ? JSON.parse(saved) : [];\n    });\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    // Enhanced plate validation\n    const PLATE_REGEX = /^[A-Z]{1,3}[ -]?\\d{1,4}[A-Z]?$/i;\n\n    const validatePlateNumber = (plate: string): boolean => {\n        if (!plate) return false;\n        const cleanPlate = plate.replace(/[ -]/g, '');\n        const patternValid = PLATE_REGEX.test(plate);\n        const hasLetters = /[A-Z]/i.test(cleanPlate);\n        const hasNumbers = /\\d/.test(cleanPlate);\n        const minLength = cleanPlate.length >= 4;\n        return patternValid && hasLetters && hasNumbers && minLength;\n    };\n\n    // Add to history function\n    const addToHistory = (plate: string, status: 'verified' | 'rejected', message: string) => {\n        const newItem: ScanHistoryItem = {\n            id: Date.now().toString(),\n            plateNumber: plate,\n            timestamp: new Date(),\n            status,\n            message\n        };\n        const updatedHistory = [newItem, ...scanHistory];\n        setScanHistory(updatedHistory);\n        localStorage.setItem('scanHistory', JSON.stringify(updatedHistory));\n    };\n\n    // Clean up camera\n    useEffect(() => {\n        return () => {\n            if (videoRef.current?.srcObject) {\n                const stream = videoRef.current.srcObject as MediaStream;\n                stream.getTracks().forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // Camera initialization\n    useEffect(() => {\n        if (scanMethod === 'camera' && cameraActive) {\n            const startCamera = async () => {\n                try {\n                    const stream = await navigator.mediaDevices.getUserMedia({ \n                        video: { facingMode: 'environment' } \n                    });\n                    if (videoRef.current) {\n                        videoRef.current.srcObject = stream;\n                    }\n                } catch (err) {\n                    console.error('Camera error:', err);\n                    setVerificationResult('Camera access denied. Using manual entry.');\n                    setScanMethod('manual');\n                    setCameraActive(false);\n                }\n            };\n            startCamera();\n        }\n    }, [scanMethod, cameraActive]);\n\n    const captureImage = () => {\n        if (videoRef.current && canvasRef.current) {\n            const context = canvasRef.current.getContext('2d');\n            if (context) {\n                canvasRef.current.width = videoRef.current.videoWidth;\n                canvasRef.current.height = videoRef.current.videoHeight;\n                context.drawImage(videoRef.current, 0, 0);\n                const imageUrl = canvasRef.current.toDataURL('image/jpeg');\n                setCapturedImage(imageUrl);\n                setVerificationResult(\"Processing image...\");\n                setTimeout(() => {\n                    setVerificationResult(\"Please confirm the plate number\");\n                    setUserEnteredPlate('');\n                }, 1500);\n            }\n        }\n    };\n\n    const handleManualInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.toUpperCase();\n        setPlateNumber(value);\n        setVerificationResult(null);\n        setIsValidPlate(validatePlateNumber(value));\n    };\n\n    const handleManualCorrection = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUserEnteredPlate(e.target.value.toUpperCase());\n    };\n\n    const confirmPlateNumber = () => {\n        if (userEnteredPlate) {\n            setPlateNumber(userEnteredPlate);\n            setIsValidPlate(validatePlateNumber(userEnteredPlate));\n            setVerificationResult(null);\n        }\n    };\n\n    const handleScan = () => {\n        if (!plateNumber.trim()) {\n            const errorMsg = 'Please enter a plate number';\n            setVerificationResult(errorMsg);\n            setIsValidPlate(false);\n            addToHistory('', 'rejected', errorMsg);\n            return;\n        }\n\n        const isValid = validatePlateNumber(plateNumber);\n        setIsValidPlate(isValid);\n\n        if (!isValid) {\n            const errorMsg = 'Invalid plate number format';\n            setVerificationResult(errorMsg);\n            addToHistory(plateNumber, 'rejected', errorMsg);\n            return;\n        }\n\n        setVerificationResult(\"Verifying plate...\");\n        setTimeout(() => {\n            const successMsg = `Vehicle ${plateNumber} verified successfully`;\n            setVerificationResult(successMsg);\n            addToHistory(plateNumber, 'verified', successMsg);\n        }, 1000);\n    };\n\n    const toggleCamera = () => {\n        setCameraActive(!cameraActive);\n        if (!cameraActive) {\n            setPlateNumber('');\n            setCapturedImage(null);\n            setIsValidPlate(null);\n            setVerificationResult(null);\n        }\n    };\n\n    return (\n        <div className=\"scan-container\">\n            <h2>Vehicle Plate Scanner</h2>\n            \n            {/* ... rest of your existing JSX ... */}\n\n            <canvas ref={canvasRef} style={{ display: 'none' }} />\n        </div>\n    );\n};\n\nexport default ScanPlate;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}