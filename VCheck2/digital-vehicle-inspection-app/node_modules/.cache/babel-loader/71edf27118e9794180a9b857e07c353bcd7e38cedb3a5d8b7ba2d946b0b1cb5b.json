{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semicolon\\\\Desktop\\\\VCheck2\\\\digital-vehicle-inspection-app\\\\src\\\\components\\\\Inspector\\\\InspectionHistory.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getInspectionHistory } from '../../api';\n\n// Define the type for an inspection history item\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InspectionHistory = () => {\n  _s();\n  const [history, setHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadInspectionHistory = async () => {\n      try {\n        const data = await getInspectionHistory();\n        console.log('API inspection history:', data);\n\n        // Map the API data to your interface if needed\n        const mapped = data.map(item => {\n          var _ref, _item$id, _item$date, _ref2, _item$vehiclePlate, _ref3, _item$inspectorName, _ref4, _item$report;\n          return {\n            id: (_ref = (_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : item._id) !== null && _ref !== void 0 ? _ref : '',\n            date: (_item$date = item.date) !== null && _item$date !== void 0 ? _item$date : '',\n            vehiclePlate: (_ref2 = (_item$vehiclePlate = item.vehiclePlate) !== null && _item$vehiclePlate !== void 0 ? _item$vehiclePlate : item.plate) !== null && _ref2 !== void 0 ? _ref2 : '',\n            inspectorName: (_ref3 = (_item$inspectorName = item.inspectorName) !== null && _item$inspectorName !== void 0 ? _item$inspectorName : item.inspector) !== null && _ref3 !== void 0 ? _ref3 : '',\n            report: (_ref4 = (_item$report = item.report) !== null && _item$report !== void 0 ? _item$report : item.reportText) !== null && _ref4 !== void 0 ? _ref4 : ''\n          };\n        });\n        setHistory(mapped);\n      } catch (err) {\n        setError('Failed to load inspection history');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadInspectionHistory();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inspection History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: history.map(inspection => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", inspection.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Vehicle Plate: \", inspection.vehiclePlate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Inspector: \", inspection.inspectorName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Report: \", inspection.report]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this)]\n      }, inspection.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(InspectionHistory, \"CvlHmHwzSyuZZUdDlC8fNs/HKHo=\");\n_c = InspectionHistory;\nexport default InspectionHistory;\nvar _c;\n$RefreshReg$(_c, \"InspectionHistory\");","map":{"version":3,"names":["React","useEffect","useState","getInspectionHistory","jsxDEV","_jsxDEV","InspectionHistory","_s","history","setHistory","loading","setLoading","error","setError","loadInspectionHistory","data","console","log","mapped","map","item","_ref","_item$id","_item$date","_ref2","_item$vehiclePlate","_ref3","_item$inspectorName","_ref4","_item$report","id","_id","date","vehiclePlate","plate","inspectorName","inspector","report","reportText","err","children","fileName","_jsxFileName","lineNumber","columnNumber","inspection","_c","$RefreshReg$"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Inspector/InspectionHistory.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getInspectionHistory } from '../../api';\n\n// Define the type for an inspection history item\ninterface Inspection {\n    id: string;\n    date: string;\n    vehiclePlate: string;\n    inspectorName: string;\n    report: string;\n}\n\nconst InspectionHistory: React.FC = () => {\n    const [history, setHistory] = useState<Inspection[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const loadInspectionHistory = async () => {\n            try {\n                const data = await getInspectionHistory();\n                console.log('API inspection history:', data);\n\n                // Map the API data to your interface if needed\n                const mapped: Inspection[] = data.map((item: any) => ({\n                    id: item.id ?? item._id ?? '',\n                    date: item.date ?? '',\n                    vehiclePlate: item.vehiclePlate ?? item.plate ?? '',\n                    inspectorName: item.inspectorName ?? item.inspector ?? '',\n                    report: item.report ?? item.reportText ?? '',\n                }));\n\n                setHistory(mapped);\n            } catch (err) {\n                setError('Failed to load inspection history');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        loadInspectionHistory();\n    }, []);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>{error}</div>;\n    }\n\n    return (\n        <div>\n            <h2>Inspection History</h2>\n            <ul>\n                {history.map((inspection) => (\n                    <li key={inspection.id}>\n                        <p>Date: {inspection.date}</p>\n                        <p>Vehicle Plate: {inspection.vehiclePlate}</p>\n                        <p>Inspector: {inspection.inspectorName}</p>\n                        <p>Report: {inspection.report}</p>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default InspectionHistory;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}