{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semicolon\\\\Desktop\\\\VCheck2\\\\digital-vehicle-inspection-app\\\\src\\\\components\\\\Inspector\\\\ScanPlate.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScanPlate = () => {\n  _s();\n  const [plateNumber, setPlateNumber] = useState('');\n  const [verificationResult, setVerificationResult] = useState(null);\n  const [scanMethod, setScanMethod] = useState('manual');\n  const [cameraActive, setCameraActive] = useState(false);\n  const [isValidPlate, setIsValidPlate] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Enhanced plate validation\n  const PLATE_REGEX = /^[A-Z]{1,3}[ -]?\\d{1,4}[A-Z]?$/i;\n  const validatePlateNumber = plate => {\n    if (!plate) return false;\n    const cleanPlate = plate.replace(/[ -]/g, '');\n    const patternValid = PLATE_REGEX.test(plate);\n    const hasLetters = /[A-Z]/i.test(cleanPlate);\n    const hasNumbers = /\\d/.test(cleanPlate);\n    const minLength = cleanPlate.length >= 4;\n    return patternValid && hasLetters && hasNumbers && minLength;\n  };\n\n  // Clean up camera\n  useEffect(() => {\n    return () => {\n      var _videoRef$current;\n      if ((_videoRef$current = videoRef.current) !== null && _videoRef$current !== void 0 && _videoRef$current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Camera initialization\n  useEffect(() => {\n    if (scanMethod === 'camera' && cameraActive) {\n      const startCamera = async () => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: {\n              facingMode: 'environment'\n            }\n          });\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        } catch (err) {\n          console.error('Camera error:', err);\n          setVerificationResult('Camera access denied. Using manual entry.');\n          setScanMethod('manual');\n          setCameraActive(false);\n        }\n      };\n      startCamera();\n    }\n  }, [scanMethod, cameraActive]);\n  const handleManualInput = e => {\n    const value = e.target.value.toUpperCase();\n    setPlateNumber(value);\n    setVerificationResult(null);\n    setIsValidPlate(validatePlateNumber(value));\n  };\n  const handleCapturePlate = () => {\n    // More realistic test plates\n    const testPlates = [{\n      plate: \"ABC123\",\n      valid: true\n    }, {\n      plate: \"AB 123\",\n      valid: true\n    }, {\n      plate: \"X-1234\",\n      valid: true\n    }, {\n      plate: \"XYZ1A\",\n      valid: true\n    }, {\n      plate: \"INVALID\",\n      valid: false\n    }, {\n      plate: \"123456\",\n      valid: false\n    }, {\n      plate: \"ABCDEF\",\n      valid: false\n    }];\n    const randomPlate = testPlates[Math.floor(Math.random() * testPlates.length)];\n    setPlateNumber(randomPlate.plate);\n    setIsValidPlate(randomPlate.valid);\n    setVerificationResult(randomPlate.valid ? null : \"Invalid plate format detected\");\n  };\n  const handleScan = () => {\n    if (!plateNumber.trim()) {\n      setVerificationResult('Please enter a plate number');\n      setIsValidPlate(false);\n      return;\n    }\n    const isValid = validatePlateNumber(plateNumber);\n    setIsValidPlate(isValid);\n    if (!isValid) {\n      setVerificationResult('Invalid plate number format');\n      return;\n    }\n\n    // Simulate API verification\n    setTimeout(() => {\n      setVerificationResult(`Vehicle ${plateNumber} verified successfully`);\n      // In real app: send to backend, add to history, etc.\n    }, 1000);\n  };\n  const toggleCamera = () => {\n    setCameraActive(!cameraActive);\n    if (!cameraActive) {\n      setPlateNumber('');\n      setIsValidPlate(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Vehicle Plate Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scan-method-toggle\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `method-btn ${scanMethod === 'camera' ? 'active' : ''}`,\n        onClick: () => setScanMethod('camera'),\n        children: \"Camera Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `method-btn ${scanMethod === 'manual' ? 'active' : ''}`,\n        onClick: () => setScanMethod('manual'),\n        children: \"Manual Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), scanMethod === 'camera' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `camera-feed ${cameraActive ? 'active' : 'inactive'}`,\n        children: cameraActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleCapturePlate,\n            children: \"Capture Plate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"camera-placeholder\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Camera is off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleCamera,\n        children: cameraActive ? 'Stop Camera' : 'Start Camera'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manual-entry\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: plateNumber,\n        onChange: handleManualInput,\n        placeholder: \"e.g. ABC123 or AB 1234\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this), plateNumber && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `validation ${isValidPlate ? 'valid' : 'invalid'}`,\n        children: isValidPlate ? 'Valid format' : 'Invalid format'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleScan,\n      disabled: !plateNumber || isValidPlate === false,\n      children: \"Verify Plate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), verificationResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result ${verificationResult.includes('Invalid') ? 'error' : 'success'}`,\n      children: verificationResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n};\n_s(ScanPlate, \"scFgBpttb7+iNdhRomK6Crmf9S0=\");\n_c = ScanPlate;\nexport default ScanPlate;\nvar _c;\n$RefreshReg$(_c, \"ScanPlate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ScanPlate","_s","plateNumber","setPlateNumber","verificationResult","setVerificationResult","scanMethod","setScanMethod","cameraActive","setCameraActive","isValidPlate","setIsValidPlate","videoRef","canvasRef","PLATE_REGEX","validatePlateNumber","plate","cleanPlate","replace","patternValid","test","hasLetters","hasNumbers","minLength","length","_videoRef$current","current","srcObject","stream","getTracks","forEach","track","stop","startCamera","navigator","mediaDevices","getUserMedia","video","facingMode","err","console","error","handleManualInput","e","value","target","toUpperCase","handleCapturePlate","testPlates","valid","randomPlate","Math","floor","random","handleScan","trim","isValid","setTimeout","toggleCamera","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","playsInline","muted","type","onChange","placeholder","autoFocus","disabled","includes","_c","$RefreshReg$"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Inspector/ScanPlate.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\n\nconst ScanPlate: React.FC = () => {\n    const [plateNumber, setPlateNumber] = useState('');\n    const [verificationResult, setVerificationResult] = useState<string | null>(null);\n    const [scanMethod, setScanMethod] = useState<'camera' | 'manual'>('manual');\n    const [cameraActive, setCameraActive] = useState(false);\n    const [isValidPlate, setIsValidPlate] = useState<boolean | null>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    // Enhanced plate validation\n    const PLATE_REGEX = /^[A-Z]{1,3}[ -]?\\d{1,4}[A-Z]?$/i;\n\n    const validatePlateNumber = (plate: string): boolean => {\n        if (!plate) return false;\n        \n        const cleanPlate = plate.replace(/[ -]/g, '');\n        const patternValid = PLATE_REGEX.test(plate);\n        const hasLetters = /[A-Z]/i.test(cleanPlate);\n        const hasNumbers = /\\d/.test(cleanPlate);\n        const minLength = cleanPlate.length >= 4;\n        \n        return patternValid && hasLetters && hasNumbers && minLength;\n    };\n\n    // Clean up camera\n    useEffect(() => {\n        return () => {\n            if (videoRef.current?.srcObject) {\n                const stream = videoRef.current.srcObject as MediaStream;\n                stream.getTracks().forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // Camera initialization\n    useEffect(() => {\n        if (scanMethod === 'camera' && cameraActive) {\n            const startCamera = async () => {\n                try {\n                    const stream = await navigator.mediaDevices.getUserMedia({ \n                        video: { facingMode: 'environment' } \n                    });\n                    if (videoRef.current) {\n                        videoRef.current.srcObject = stream;\n                    }\n                } catch (err) {\n                    console.error('Camera error:', err);\n                    setVerificationResult('Camera access denied. Using manual entry.');\n                    setScanMethod('manual');\n                    setCameraActive(false);\n                }\n            };\n            startCamera();\n        }\n    }, [scanMethod, cameraActive]);\n\n    const handleManualInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.toUpperCase();\n        setPlateNumber(value);\n        setVerificationResult(null);\n        setIsValidPlate(validatePlateNumber(value));\n    };\n\n    const handleCapturePlate = () => {\n        // More realistic test plates\n        const testPlates = [\n            { plate: \"ABC123\", valid: true },\n            { plate: \"AB 123\", valid: true },\n            { plate: \"X-1234\", valid: true },\n            { plate: \"XYZ1A\", valid: true },\n            { plate: \"INVALID\", valid: false },\n            { plate: \"123456\", valid: false },\n            { plate: \"ABCDEF\", valid: false }\n        ];\n        \n        const randomPlate = testPlates[Math.floor(Math.random() * testPlates.length)];\n        setPlateNumber(randomPlate.plate);\n        setIsValidPlate(randomPlate.valid);\n        setVerificationResult(randomPlate.valid ? null : \"Invalid plate format detected\");\n    };\n\n    const handleScan = () => {\n        if (!plateNumber.trim()) {\n            setVerificationResult('Please enter a plate number');\n            setIsValidPlate(false);\n            return;\n        }\n\n        const isValid = validatePlateNumber(plateNumber);\n        setIsValidPlate(isValid);\n\n        if (!isValid) {\n            setVerificationResult('Invalid plate number format');\n            return;\n        }\n\n        // Simulate API verification\n        setTimeout(() => {\n            setVerificationResult(`Vehicle ${plateNumber} verified successfully`);\n            // In real app: send to backend, add to history, etc.\n        }, 1000);\n    };\n\n    const toggleCamera = () => {\n        setCameraActive(!cameraActive);\n        if (!cameraActive) {\n            setPlateNumber('');\n            setIsValidPlate(null);\n        }\n    };\n\n    return (\n        <div className=\"scan-container\">\n            <h2>Vehicle Plate Scanner</h2>\n            \n            <div className=\"scan-method-toggle\">\n                <button\n                    className={`method-btn ${scanMethod === 'camera' ? 'active' : ''}`}\n                    onClick={() => setScanMethod('camera')}\n                >\n                    Camera Scan\n                </button>\n                <button\n                    className={`method-btn ${scanMethod === 'manual' ? 'active' : ''}`}\n                    onClick={() => setScanMethod('manual')}\n                >\n                    Manual Entry\n                </button>\n            </div>\n\n            {scanMethod === 'camera' ? (\n                <div className=\"camera-section\">\n                    <div className={`camera-feed ${cameraActive ? 'active' : 'inactive'}`}>\n                        {cameraActive ? (\n                            <>\n                                <video ref={videoRef} autoPlay playsInline muted />\n                                <button onClick={handleCapturePlate}>\n                                    Capture Plate\n                                </button>\n                            </>\n                        ) : (\n                            <div className=\"camera-placeholder\">\n                                <p>Camera is off</p>\n                            </div>\n                        )}\n                    </div>\n                    <button onClick={toggleCamera}>\n                        {cameraActive ? 'Stop Camera' : 'Start Camera'}\n                    </button>\n                </div>\n            ) : (\n                <div className=\"manual-entry\">\n                    <input\n                        type=\"text\"\n                        value={plateNumber}\n                        onChange={handleManualInput}\n                        placeholder=\"e.g. ABC123 or AB 1234\"\n                        autoFocus\n                    />\n                    {plateNumber && (\n                        <div className={`validation ${isValidPlate ? 'valid' : 'invalid'}`}>\n                            {isValidPlate ? 'Valid format' : 'Invalid format'}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            <button \n                onClick={handleScan}\n                disabled={!plateNumber || isValidPlate === false}\n            >\n                Verify Plate\n            </button>\n\n            {verificationResult && (\n                <div className={`result ${verificationResult.includes('Invalid') ? 'error' : 'success'}`}>\n                    {verificationResult}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ScanPlate;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}