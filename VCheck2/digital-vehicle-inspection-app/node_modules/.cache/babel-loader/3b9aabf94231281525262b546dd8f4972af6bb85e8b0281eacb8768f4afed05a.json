{"ast":null,"code":"const loadInspectionHistory = async () => {\n  try {\n    const userData = JSON.parse(localStorage.getItem('user') || '{}');\n    const inspectorId = userData.id || userData._id;\n    if (!inspectorId) throw new Error('Inspector ID not found');\n    const data = await getInspectionHistory(inspectorId);\n    const apiHistory = data.map(item => {\n      var _ref, _item$id, _item$date, _ref2, _item$vehiclePlate, _ref3, _item$inspectorName, _item$inspector, _ref4, _item$report, _item$status;\n      return {\n        id: (_ref = (_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : item._id) !== null && _ref !== void 0 ? _ref : '',\n        date: new Date((_item$date = item.date) !== null && _item$date !== void 0 ? _item$date : item.createdAt).toLocaleString(),\n        vehiclePlate: (_ref2 = (_item$vehiclePlate = item.vehiclePlate) !== null && _item$vehiclePlate !== void 0 ? _item$vehiclePlate : item.plate) !== null && _ref2 !== void 0 ? _ref2 : '',\n        inspectorName: (_ref3 = (_item$inspectorName = item.inspectorName) !== null && _item$inspectorName !== void 0 ? _item$inspectorName : (_item$inspector = item.inspector) === null || _item$inspector === void 0 ? void 0 : _item$inspector.name) !== null && _ref3 !== void 0 ? _ref3 : '',\n        report: (_ref4 = (_item$report = item.report) !== null && _item$report !== void 0 ? _item$report : item.reportText) !== null && _ref4 !== void 0 ? _ref4 : '',\n        status: (_item$status = item.status) !== null && _item$status !== void 0 ? _item$status : 'clean'\n      };\n    });\n\n    // Corrected local history mapping\n    const localHistory = localScans.map(scan => ({\n      id: scan.id,\n      date: scan.timestamp.toLocaleString(),\n      vehiclePlate: scan.plateNumber,\n      inspectorName: userData.username || 'You',\n      report: scan.status === 'verified' ? 'Plate verification successful' : 'Invalid plate format',\n      status: scan.status === 'verified' ? 'clean' : 'violation'\n    }));\n    const combinedHistory = [...apiHistory, ...localHistory].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    setHistory(combinedHistory);\n  } catch (err) {\n    console.error('Error loading history:', err);\n    setError(err instanceof Error ? err.message : 'Failed to load inspection history');\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["loadInspectionHistory","userData","JSON","parse","localStorage","getItem","inspectorId","id","_id","Error","data","getInspectionHistory","apiHistory","map","item","_ref","_item$id","_item$date","_ref2","_item$vehiclePlate","_ref3","_item$inspectorName","_item$inspector","_ref4","_item$report","_item$status","date","Date","createdAt","toLocaleString","vehiclePlate","plate","inspectorName","inspector","name","report","reportText","status","localHistory","localScans","scan","timestamp","plateNumber","username","combinedHistory","sort","a","b","getTime","setHistory","err","console","error","setError","message","setLoading"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Inspector/InspectionHistory.tsx"],"sourcesContent":["const loadInspectionHistory = async () => {\n    try {\n        const userData = JSON.parse(localStorage.getItem('user') || '{}');\n        const inspectorId = userData.id || userData._id;\n        \n        if (!inspectorId) throw new Error('Inspector ID not found');\n\n        const data = await getInspectionHistory(inspectorId);\n        \n        const apiHistory: Inspection[] = data.map((item: any) => ({\n            id: item.id ?? item._id ?? '',\n            date: new Date(item.date ?? item.createdAt).toLocaleString(),\n            vehiclePlate: item.vehiclePlate ?? item.plate ?? '',\n            inspectorName: item.inspectorName ?? item.inspector?.name ?? '',\n            report: item.report ?? item.reportText ?? '',\n            status: item.status ?? 'clean'\n        }));\n\n        // Corrected local history mapping\n        const localHistory: Inspection[] = localScans.map((scan) => ({\n            id: scan.id,\n            date: scan.timestamp.toLocaleString(),\n            vehiclePlate: scan.plateNumber,\n            inspectorName: userData.username || 'You',\n            report: scan.status === 'verified' ? 'Plate verification successful' : 'Invalid plate format',\n            status: scan.status === 'verified' ? 'clean' : 'violation'\n        }));\n\n        const combinedHistory = [...apiHistory, ...localHistory].sort(\n            (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n        );\n\n        setHistory(combinedHistory);\n    } catch (err) {\n        console.error('Error loading history:', err);\n        setError(err instanceof Error ? err.message : 'Failed to load inspection history');\n    } finally {\n        setLoading(false);\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}