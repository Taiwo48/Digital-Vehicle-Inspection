{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Add this import\nimport './Register.css';\nconst Register = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [plateNumber, setPlateNumber] = useState('');\n  const [role, setRole] = useState('owner');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const navigate = useNavigate(); // Initialize navigate\n\n  const handleRegister = async e => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Mock response from server\n      const mockResponse = {\n        success: true,\n        user: {\n          username,\n          role,\n          token: 'mock-token-123' // In a real app, you'd get this from your backend\n        }\n      };\n      if (mockResponse.success) {\n        // Store user data (in real app: context/Redux/localStorage)\n        localStorage.setItem('user', JSON.stringify(mockResponse.user));\n\n        // Redirect based on role\n        if (role === 'inspector') {\n          navigate('/inspector-dashboard'); // Redirect to inspector dashboard\n        } else {\n          navigate('/owner-dashboard'); // Redirect to owner dashboard\n        }\n      }\n    } catch (err) {\n      setError('Registration failed. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ... (rest of your existing JSX remains the same)\n};\n_s(Register, \"vSfchhXkfcUVdlErrG2VjEwtd80=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","useNavigate","Register","_s","username","setUsername","password","setPassword","plateNumber","setPlateNumber","role","setRole","isLoading","setIsLoading","error","setError","navigate","handleRegister","e","preventDefault","Promise","resolve","setTimeout","mockResponse","success","user","token","localStorage","setItem","JSON","stringify","err","_c","$RefreshReg$"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Auth/Register.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Add this import\nimport './Register.css';\n\nconst Register: React.FC = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [plateNumber, setPlateNumber] = useState('');\n    const [role, setRole] = useState<'inspector' | 'owner'>('owner');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const navigate = useNavigate(); // Initialize navigate\n\n    const handleRegister = async (e: React.FormEvent) => {\n        e.preventDefault();\n        setError('');\n        setIsLoading(true);\n        \n        try {\n            // Simulate API call\n            await new Promise(resolve => setTimeout(resolve, 1500));\n            \n            // Mock response from server\n            const mockResponse = {\n                success: true,\n                user: {\n                    username,\n                    role,\n                    token: 'mock-token-123' // In a real app, you'd get this from your backend\n                }\n            };\n\n            if (mockResponse.success) {\n                // Store user data (in real app: context/Redux/localStorage)\n                localStorage.setItem('user', JSON.stringify(mockResponse.user));\n                \n                // Redirect based on role\n                if (role === 'inspector') {\n                    navigate('/inspector-dashboard'); // Redirect to inspector dashboard\n                } else {\n                    navigate('/owner-dashboard'); // Redirect to owner dashboard\n                }\n            }\n            \n        } catch (err) {\n            setError('Registration failed. Please try again.');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    // ... (rest of your existing JSX remains the same)\n};\n\nexport default Register;"],"mappings":";AAAA,SAAgBA,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAO,gBAAgB;AAEvB,MAAMC,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAwB,OAAO,CAAC;EAChE,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,QAAQ,GAAGf,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMgB,cAAc,GAAG,MAAOC,CAAkB,IAAK;IACjDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBJ,QAAQ,CAAC,EAAE,CAAC;IACZF,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACA;MACA,MAAM,IAAIO,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAME,YAAY,GAAG;QACjBC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAE;UACFrB,QAAQ;UACRM,IAAI;UACJgB,KAAK,EAAE,gBAAgB,CAAC;QAC5B;MACJ,CAAC;MAED,IAAIH,YAAY,CAACC,OAAO,EAAE;QACtB;QACAG,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,YAAY,CAACE,IAAI,CAAC,CAAC;;QAE/D;QACA,IAAIf,IAAI,KAAK,WAAW,EAAE;UACtBM,QAAQ,CAAC,sBAAsB,CAAC,CAAC,CAAC;QACtC,CAAC,MAAM;UACHA,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAClC;MACJ;IAEJ,CAAC,CAAC,OAAOe,GAAG,EAAE;MACVhB,QAAQ,CAAC,wCAAwC,CAAC;IACtD,CAAC,SAAS;MACNF,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;;EAED;AACJ,CAAC;AAACV,EAAA,CAhDID,QAAkB;EAAA,QAOHD,WAAW;AAAA;AAAA+B,EAAA,GAP1B9B,QAAkB;AAkDxB,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}