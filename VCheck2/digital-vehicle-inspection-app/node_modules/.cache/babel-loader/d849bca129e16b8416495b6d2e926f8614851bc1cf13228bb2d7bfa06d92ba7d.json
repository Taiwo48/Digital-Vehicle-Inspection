{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semicolon\\\\Desktop\\\\VCheck2\\\\digital-vehicle-inspection-app\\\\src\\\\components\\\\Inspector\\\\ScanPlate.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScanPlate = () => {\n  _s();\n  const [plateNumber, setPlateNumber] = useState('');\n  const [verificationResult, setVerificationResult] = useState(null);\n  const [scanMethod, setScanMethod] = useState('manual');\n  const [cameraActive, setCameraActive] = useState(false);\n  const [isValidPlate, setIsValidPlate] = useState(null);\n  const [capturedImage, setCapturedImage] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [userEnteredPlate, setUserEnteredPlate] = useState(''); // For manual correction\n\n  // Enhanced plate validation\n  const PLATE_REGEX = /^[A-Z]{1,3}[ -]?\\d{1,4}[A-Z]?$/i;\n  const validatePlateNumber = plate => {\n    if (!plate) return false;\n    const cleanPlate = plate.replace(/[ -]/g, '');\n    const patternValid = PLATE_REGEX.test(plate);\n    const hasLetters = /[A-Z]/i.test(cleanPlate);\n    const hasNumbers = /\\d/.test(cleanPlate);\n    const minLength = cleanPlate.length >= 4;\n    return patternValid && hasLetters && hasNumbers && minLength;\n  };\n\n  // Clean up camera\n  useEffect(() => {\n    return () => {\n      var _videoRef$current;\n      if ((_videoRef$current = videoRef.current) !== null && _videoRef$current !== void 0 && _videoRef$current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Camera initialization\n  useEffect(() => {\n    if (scanMethod === 'camera' && cameraActive) {\n      const startCamera = async () => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: {\n              facingMode: 'environment'\n            }\n          });\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        } catch (err) {\n          console.error('Camera error:', err);\n          setVerificationResult('Camera access denied. Using manual entry.');\n          setScanMethod('manual');\n          setCameraActive(false);\n        }\n      };\n      startCamera();\n    }\n  }, [scanMethod, cameraActive]);\n  const captureImage = () => {\n    if (videoRef.current && canvasRef.current) {\n      const context = canvasRef.current.getContext('2d');\n      if (context) {\n        canvasRef.current.width = videoRef.current.videoWidth;\n        canvasRef.current.height = videoRef.current.videoHeight;\n        context.drawImage(videoRef.current, 0, 0);\n\n        // Convert canvas to image URL\n        const imageUrl = canvasRef.current.toDataURL('image/jpeg');\n        setCapturedImage(imageUrl);\n\n        // Simulate OCR processing with loading state\n        setVerificationResult(\"Processing image...\");\n        setTimeout(() => {\n          // This would be replaced with actual OCR in a real app\n          // For demo, we'll show the captured image and let user enter\n          setVerificationResult(\"Please confirm the plate number\");\n          setUserEnteredPlate(''); // Reset manual entry\n        }, 1500);\n      }\n    }\n  };\n  const handleManualInput = e => {\n    const value = e.target.value.toUpperCase();\n    setPlateNumber(value);\n    setVerificationResult(null);\n    setIsValidPlate(validatePlateNumber(value));\n  };\n  const handleManualCorrection = e => {\n    setUserEnteredPlate(e.target.value.toUpperCase());\n  };\n  const confirmPlateNumber = () => {\n    if (userEnteredPlate) {\n      setPlateNumber(userEnteredPlate);\n      setIsValidPlate(validatePlateNumber(userEnteredPlate));\n      setVerificationResult(null);\n    }\n  };\n  const handleScan = () => {\n    if (!plateNumber.trim()) {\n      setVerificationResult('Please enter a plate number');\n      setIsValidPlate(false);\n      return;\n    }\n    const isValid = validatePlateNumber(plateNumber);\n    setIsValidPlate(isValid);\n    if (!isValid) {\n      setVerificationResult('Invalid plate number format');\n      return;\n    }\n\n    // Simulate API verification\n    setVerificationResult(\"Verifying plate...\");\n    setTimeout(() => {\n      setVerificationResult(`Vehicle ${plateNumber} verified successfully`);\n      // In real app: send to backend, add to history, etc.\n    }, 1000);\n  };\n  const toggleCamera = () => {\n    setCameraActive(!cameraActive);\n    if (!cameraActive) {\n      setPlateNumber('');\n      setCapturedImage(null);\n      setIsValidPlate(null);\n      setVerificationResult(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Vehicle Plate Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scan-method-toggle\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `method-btn ${scanMethod === 'camera' ? 'active' : ''}`,\n        onClick: () => setScanMethod('camera'),\n        children: \"Camera Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `method-btn ${scanMethod === 'manual' ? 'active' : ''}`,\n        onClick: () => setScanMethod('manual'),\n        children: \"Manual Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), scanMethod === 'camera' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `camera-feed ${cameraActive ? 'active' : 'inactive'}`,\n        children: cameraActive ? capturedImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: capturedImage,\n          alt: \"Captured plate\",\n          className: \"captured-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: true,\n          className: \"video-preview\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"camera-placeholder\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Camera is off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"camera-controls\",\n        children: [cameraActive && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: !capturedImage ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"capture-btn\",\n            onClick: captureImage,\n            children: \"Capture Plate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 37\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"capture-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"retry-btn\",\n              onClick: () => {\n                setCapturedImage(null);\n                setVerificationResult(null);\n              },\n              children: \"Retry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 41\n            }, this), userEnteredPlate ? /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"verify-btn\",\n              onClick: confirmPlateNumber,\n              children: \"Confirm Plate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"verify-btn\",\n              onClick: handleScan,\n              disabled: !plateNumber || isValidPlate === false,\n              children: \"Verify Plate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 37\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `camera-toggle ${cameraActive ? 'active' : ''}`,\n          onClick: toggleCamera,\n          children: cameraActive ? 'Stop Camera' : 'Start Camera'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), capturedImage && verificationResult === \"Please confirm the plate number\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plate-confirmation\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userEnteredPlate,\n          onChange: handleManualCorrection,\n          placeholder: \"Enter plate number from image\",\n          className: \"correction-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-plate\",\n          children: plateNumber && `Detected: ${plateNumber}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }, this), plateNumber && verificationResult !== \"Please confirm the plate number\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"detection-result\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Plate Number: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: plateNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 46\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `validation ${isValidPlate ? 'valid' : 'invalid'}`,\n          children: isValidPlate ? 'Valid format' : 'Invalid format'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manual-entry\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: plateNumber,\n        onChange: handleManualInput,\n        placeholder: \"e.g. ABC123 or AB 1234\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), plateNumber && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `validation ${isValidPlate ? 'valid' : 'invalid'}`,\n        children: isValidPlate ? 'Valid format' : 'Invalid format'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }, this), verificationResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result ${verificationResult.includes('Invalid') ? 'error' : verificationResult.includes('success') ? 'success' : 'info'}`,\n      children: verificationResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n};\n_s(ScanPlate, \"vkzqXR67kGrGcwYOoVLz+Zs8F8Y=\");\n_c = ScanPlate;\nexport default ScanPlate;\nA;\nvar _c;\n$RefreshReg$(_c, \"ScanPlate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ScanPlate","_s","plateNumber","setPlateNumber","verificationResult","setVerificationResult","scanMethod","setScanMethod","cameraActive","setCameraActive","isValidPlate","setIsValidPlate","capturedImage","setCapturedImage","videoRef","canvasRef","userEnteredPlate","setUserEnteredPlate","PLATE_REGEX","validatePlateNumber","plate","cleanPlate","replace","patternValid","test","hasLetters","hasNumbers","minLength","length","_videoRef$current","current","srcObject","stream","getTracks","forEach","track","stop","startCamera","navigator","mediaDevices","getUserMedia","video","facingMode","err","console","error","captureImage","context","getContext","width","videoWidth","height","videoHeight","drawImage","imageUrl","toDataURL","setTimeout","handleManualInput","e","value","target","toUpperCase","handleManualCorrection","confirmPlateNumber","handleScan","trim","isValid","toggleCamera","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","ref","autoPlay","playsInline","muted","disabled","type","onChange","placeholder","autoFocus","includes","style","display","_c","A","$RefreshReg$"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Inspector/ScanPlate.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\n\nconst ScanPlate: React.FC = () => {\n    const [plateNumber, setPlateNumber] = useState('');\n    const [verificationResult, setVerificationResult] = useState<string | null>(null);\n    const [scanMethod, setScanMethod] = useState<'camera' | 'manual'>('manual');\n    const [cameraActive, setCameraActive] = useState(false);\n    const [isValidPlate, setIsValidPlate] = useState<boolean | null>(null);\n    const [capturedImage, setCapturedImage] = useState<string | null>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [userEnteredPlate, setUserEnteredPlate] = useState(''); // For manual correction\n\n    // Enhanced plate validation\n    const PLATE_REGEX = /^[A-Z]{1,3}[ -]?\\d{1,4}[A-Z]?$/i;\n\n    const validatePlateNumber = (plate: string): boolean => {\n        if (!plate) return false;\n        \n        const cleanPlate = plate.replace(/[ -]/g, '');\n        const patternValid = PLATE_REGEX.test(plate);\n        const hasLetters = /[A-Z]/i.test(cleanPlate);\n        const hasNumbers = /\\d/.test(cleanPlate);\n        const minLength = cleanPlate.length >= 4;\n        \n        return patternValid && hasLetters && hasNumbers && minLength;\n    };\n\n    // Clean up camera\n    useEffect(() => {\n        return () => {\n            if (videoRef.current?.srcObject) {\n                const stream = videoRef.current.srcObject as MediaStream;\n                stream.getTracks().forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // Camera initialization\n    useEffect(() => {\n        if (scanMethod === 'camera' && cameraActive) {\n            const startCamera = async () => {\n                try {\n                    const stream = await navigator.mediaDevices.getUserMedia({ \n                        video: { facingMode: 'environment' } \n                    });\n                    if (videoRef.current) {\n                        videoRef.current.srcObject = stream;\n                    }\n                } catch (err) {\n                    console.error('Camera error:', err);\n                    setVerificationResult('Camera access denied. Using manual entry.');\n                    setScanMethod('manual');\n                    setCameraActive(false);\n                }\n            };\n            startCamera();\n        }\n    }, [scanMethod, cameraActive]);\n\n    const captureImage = () => {\n        if (videoRef.current && canvasRef.current) {\n            const context = canvasRef.current.getContext('2d');\n            if (context) {\n                canvasRef.current.width = videoRef.current.videoWidth;\n                canvasRef.current.height = videoRef.current.videoHeight;\n                context.drawImage(videoRef.current, 0, 0);\n                \n                // Convert canvas to image URL\n                const imageUrl = canvasRef.current.toDataURL('image/jpeg');\n                setCapturedImage(imageUrl);\n                \n                // Simulate OCR processing with loading state\n                setVerificationResult(\"Processing image...\");\n                setTimeout(() => {\n                    // This would be replaced with actual OCR in a real app\n                    // For demo, we'll show the captured image and let user enter\n                    setVerificationResult(\"Please confirm the plate number\");\n                    setUserEnteredPlate(''); // Reset manual entry\n                }, 1500);\n            }\n        }\n    };\n\n    const handleManualInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.toUpperCase();\n        setPlateNumber(value);\n        setVerificationResult(null);\n        setIsValidPlate(validatePlateNumber(value));\n    };\n\n    const handleManualCorrection = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setUserEnteredPlate(e.target.value.toUpperCase());\n    };\n\n    const confirmPlateNumber = () => {\n        if (userEnteredPlate) {\n            setPlateNumber(userEnteredPlate);\n            setIsValidPlate(validatePlateNumber(userEnteredPlate));\n            setVerificationResult(null);\n        }\n    };\n\n    const handleScan = () => {\n        if (!plateNumber.trim()) {\n            setVerificationResult('Please enter a plate number');\n            setIsValidPlate(false);\n            return;\n        }\n\n        const isValid = validatePlateNumber(plateNumber);\n        setIsValidPlate(isValid);\n\n        if (!isValid) {\n            setVerificationResult('Invalid plate number format');\n            return;\n        }\n\n        // Simulate API verification\n        setVerificationResult(\"Verifying plate...\");\n        setTimeout(() => {\n            setVerificationResult(`Vehicle ${plateNumber} verified successfully`);\n            // In real app: send to backend, add to history, etc.\n        }, 1000);\n    };\n\n    const toggleCamera = () => {\n        setCameraActive(!cameraActive);\n        if (!cameraActive) {\n            setPlateNumber('');\n            setCapturedImage(null);\n            setIsValidPlate(null);\n            setVerificationResult(null);\n        }\n    };\n\n    return (\n        <div className=\"scan-container\">\n            <h2>Vehicle Plate Scanner</h2>\n            \n            <div className=\"scan-method-toggle\">\n                <button\n                    className={`method-btn ${scanMethod === 'camera' ? 'active' : ''}`}\n                    onClick={() => setScanMethod('camera')}\n                >\n                    Camera Scan\n                </button>\n                <button\n                    className={`method-btn ${scanMethod === 'manual' ? 'active' : ''}`}\n                    onClick={() => setScanMethod('manual')}\n                >\n                    Manual Entry\n                </button>\n            </div>\n\n            {scanMethod === 'camera' ? (\n                <div className=\"camera-section\">\n                    <div className={`camera-feed ${cameraActive ? 'active' : 'inactive'}`}>\n                        {cameraActive ? (\n                            capturedImage ? (\n                                <img src={capturedImage} alt=\"Captured plate\" className=\"captured-image\" />\n                            ) : (\n                                <video ref={videoRef} autoPlay playsInline muted className=\"video-preview\" />\n                            )\n                        ) : (\n                            <div className=\"camera-placeholder\">\n                                <p>Camera is off</p>\n                            </div>\n                        )}\n                    </div>\n\n                    <div className=\"camera-controls\">\n                        {cameraActive && (\n                            <>\n                                {!capturedImage ? (\n                                    <button \n                                        className=\"capture-btn\"\n                                        onClick={captureImage}\n                                    >\n                                        Capture Plate\n                                    </button>\n                                ) : (\n                                    <div className=\"capture-actions\">\n                                        <button \n                                            className=\"retry-btn\"\n                                            onClick={() => {\n                                                setCapturedImage(null);\n                                                setVerificationResult(null);\n                                            }}\n                                        >\n                                            Retry\n                                        </button>\n                                        {userEnteredPlate ? (\n                                            <button \n                                                className=\"verify-btn\"\n                                                onClick={confirmPlateNumber}\n                                            >\n                                                Confirm Plate\n                                            </button>\n                                        ) : (\n                                            <button \n                                                className=\"verify-btn\"\n                                                onClick={handleScan}\n                                                disabled={!plateNumber || isValidPlate === false}\n                                            >\n                                                Verify Plate\n                                            </button>\n                                        )}\n                                    </div>\n                                )}\n                            </>\n                        )}\n                        <button \n                            className={`camera-toggle ${cameraActive ? 'active' : ''}`}\n                            onClick={toggleCamera}\n                        >\n                            {cameraActive ? 'Stop Camera' : 'Start Camera'}\n                        </button>\n                    </div>\n\n                    {capturedImage && verificationResult === \"Please confirm the plate number\" && (\n                        <div className=\"plate-confirmation\">\n                            <input\n                                type=\"text\"\n                                value={userEnteredPlate}\n                                onChange={handleManualCorrection}\n                                placeholder=\"Enter plate number from image\"\n                                className=\"correction-input\"\n                            />\n                            <div className=\"current-plate\">\n                                {plateNumber && `Detected: ${plateNumber}`}\n                            </div>\n                        </div>\n                    )}\n\n                    {plateNumber && verificationResult !== \"Please confirm the plate number\" && (\n                        <div className=\"detection-result\">\n                            <p>Plate Number: <strong>{plateNumber}</strong></p>\n                            <div className={`validation ${isValidPlate ? 'valid' : 'invalid'}`}>\n                                {isValidPlate ? 'Valid format' : 'Invalid format'}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            ) : (\n                <div className=\"manual-entry\">\n                    <input\n                        type=\"text\"\n                        value={plateNumber}\n                        onChange={handleManualInput}\n                        placeholder=\"e.g. ABC123 or AB 1234\"\n                        autoFocus\n                    />\n                    {plateNumber && (\n                        <div className={`validation ${isValidPlate ? 'valid' : 'invalid'}`}>\n                            {isValidPlate ? 'Valid format' : 'Invalid format'}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {verificationResult && (\n                <div className={`result ${verificationResult.includes('Invalid') ? 'error' : \n                                verificationResult.includes('success') ? 'success' : 'info'}`}>\n                    {verificationResult}\n                </div>\n            )}\n\n            <canvas ref={canvasRef} style={{ display: 'none' }} />\n        </div>\n    );\n};\n\nexport default ScanPlate;A"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}