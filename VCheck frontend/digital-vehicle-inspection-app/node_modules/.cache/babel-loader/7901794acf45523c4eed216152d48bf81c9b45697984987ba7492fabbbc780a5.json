{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Semicolon\\\\Desktop\\\\VCheck2\\\\digital-vehicle-inspection-app\\\\src\\\\components\\\\Inspector\\\\ScanPlate.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScanPlate = () => {\n  _s();\n  const [plateNumber, setPlateNumber] = useState('');\n  const [verificationResult, setVerificationResult] = useState(null);\n  const [scanMethod, setScanMethod] = useState('manual');\n  const [cameraActive, setCameraActive] = useState(false);\n  const [isValidPlate, setIsValidPlate] = useState(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // Plate number validation regex (adjust based on your country's plate format)\n  const PLATE_REGEX = /^[A-Z]{2,3}\\d{2,4}[A-Z]?$/i;\n  const validatePlateNumber = plate => {\n    return PLATE_REGEX.test(plate);\n  };\n\n  // Clean up camera on unmount or mode change\n  useEffect(() => {\n    return () => {\n      var _videoRef$current;\n      if ((_videoRef$current = videoRef.current) !== null && _videoRef$current !== void 0 && _videoRef$current.srcObject) {\n        const stream = videoRef.current.srcObject;\n        stream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Camera initialization\n  useEffect(() => {\n    if (scanMethod === 'camera' && cameraActive) {\n      const startCamera = async () => {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: {\n              facingMode: 'environment'\n            }\n          });\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        } catch (err) {\n          console.error('Camera error:', err);\n          setVerificationResult('Camera access denied. Using manual entry.');\n          setScanMethod('manual');\n          setCameraActive(false);\n        }\n      };\n      startCamera();\n    }\n  }, [scanMethod, cameraActive]);\n  const handleManualInput = e => {\n    const value = e.target.value.toUpperCase();\n    setPlateNumber(value);\n    setVerificationResult(null);\n    setIsValidPlate(validatePlateNumber(value));\n  };\n  const handleCapturePlate = () => {\n    // Simulate plate recognition from camera\n    const mockPlates = [{\n      plate: \"ABC123\",\n      valid: true\n    }, {\n      plate: \"XYZ789\",\n      valid: true\n    }, {\n      plate: \"INVALID\",\n      valid: false\n    }, {\n      plate: \"123456\",\n      valid: false\n    }];\n    const randomPlate = mockPlates[Math.floor(Math.random() * mockPlates.length)];\n    setPlateNumber(randomPlate.plate);\n    setIsValidPlate(randomPlate.valid);\n    if (!randomPlate.valid) {\n      setVerificationResult(\"This doesn't appear to be a valid plate number\");\n    }\n  };\n  const handleScan = () => {\n    if (!plateNumber.trim()) {\n      setVerificationResult('Please enter a valid plate number.');\n      setIsValidPlate(false);\n      return;\n    }\n    if (!validatePlateNumber(plateNumber)) {\n      setVerificationResult('Invalid plate number format');\n      setIsValidPlate(false);\n      return;\n    }\n\n    // Simulate API verification\n    setTimeout(() => {\n      setVerificationResult(`Vehicle ${plateNumber} verified successfully.`);\n      setIsValidPlate(true);\n\n      // In a real app, you would:\n      // 1. Send to backend\n      // 2. Add to inspection history\n      // 3. Navigate or show next steps\n    }, 1000);\n  };\n  const toggleCamera = () => {\n    const newState = !cameraActive;\n    setCameraActive(newState);\n    if (!newState) {\n      setPlateNumber('');\n      setIsValidPlate(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scan-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"scan-header\",\n      children: \"Vehicle Plate Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scan-method-toggle\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `method-btn ${scanMethod === 'camera' ? 'active' : ''}`,\n        onClick: () => {\n          setScanMethod('camera');\n          setPlateNumber('');\n          setIsValidPlate(null);\n        },\n        children: \"Camera Scan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `method-btn ${scanMethod === 'manual' ? 'active' : ''}`,\n        onClick: () => {\n          setScanMethod('manual');\n          setCameraActive(false);\n          setPlateNumber('');\n          setIsValidPlate(null);\n        },\n        children: \"Manual Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), scanMethod === 'camera' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"camera-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `camera-feed ${cameraActive ? 'active' : 'inactive'}`,\n        children: cameraActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: videoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true,\n            className: \"video-preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"capture-btn\",\n            onClick: handleCapturePlate,\n            children: \"Capture Plate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"camera-placeholder\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"camera-icon\",\n            children: \"\\uD83D\\uDCF7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Camera is off\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `camera-toggle ${cameraActive ? 'active' : ''}`,\n        onClick: toggleCamera,\n        children: cameraActive ? 'Stop Camera' : 'Start Camera'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"manual-entry\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: plateNumber,\n        onChange: handleManualInput,\n        placeholder: \"Enter plate number (e.g. ABC123)\",\n        className: \"plate-input\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }, this), plateNumber && isValidPlate !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `validation-message ${isValidPlate ? 'valid' : 'invalid'}`,\n        children: isValidPlate ? '✓ Valid plate format' : '✗ Invalid plate format'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-section\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleScan,\n        className: \"scan-button\",\n        disabled: !plateNumber.trim() || isValidPlate === false,\n        children: scanMethod === 'camera' ? 'Verify Plate' : 'Submit Plate'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), verificationResult && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `result-message ${verificationResult.includes('success') ? 'success' : verificationResult.includes('Invalid') ? 'error' : 'warning'}`,\n      children: verificationResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n_s(ScanPlate, \"scFgBpttb7+iNdhRomK6Crmf9S0=\");\n_c = ScanPlate;\nexport default ScanPlate;\nvar _c;\n$RefreshReg$(_c, \"ScanPlate\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ScanPlate","_s","plateNumber","setPlateNumber","verificationResult","setVerificationResult","scanMethod","setScanMethod","cameraActive","setCameraActive","isValidPlate","setIsValidPlate","videoRef","canvasRef","PLATE_REGEX","validatePlateNumber","plate","test","_videoRef$current","current","srcObject","stream","getTracks","forEach","track","stop","startCamera","navigator","mediaDevices","getUserMedia","video","facingMode","err","console","error","handleManualInput","e","value","target","toUpperCase","handleCapturePlate","mockPlates","valid","randomPlate","Math","floor","random","length","handleScan","trim","setTimeout","toggleCamera","newState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","autoPlay","playsInline","muted","type","onChange","placeholder","autoFocus","disabled","includes","style","display","_c","$RefreshReg$"],"sources":["C:/Users/Semicolon/Desktop/VCheck2/digital-vehicle-inspection-app/src/components/Inspector/ScanPlate.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './ScanPlate.css';\n\nconst ScanPlate: React.FC = () => {\n    const [plateNumber, setPlateNumber] = useState('');\n    const [verificationResult, setVerificationResult] = useState<string | null>(null);\n    const [scanMethod, setScanMethod] = useState<'camera' | 'manual'>('manual');\n    const [cameraActive, setCameraActive] = useState(false);\n    const [isValidPlate, setIsValidPlate] = useState<boolean | null>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n\n    // Plate number validation regex (adjust based on your country's plate format)\n    const PLATE_REGEX = /^[A-Z]{2,3}\\d{2,4}[A-Z]?$/i;\n\n    const validatePlateNumber = (plate: string): boolean => {\n        return PLATE_REGEX.test(plate);\n    };\n\n    // Clean up camera on unmount or mode change\n    useEffect(() => {\n        return () => {\n            if (videoRef.current?.srcObject) {\n                const stream = videoRef.current.srcObject as MediaStream;\n                stream.getTracks().forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // Camera initialization\n    useEffect(() => {\n        if (scanMethod === 'camera' && cameraActive) {\n            const startCamera = async () => {\n                try {\n                    const stream = await navigator.mediaDevices.getUserMedia({ \n                        video: { facingMode: 'environment' } \n                    });\n                    if (videoRef.current) {\n                        videoRef.current.srcObject = stream;\n                    }\n                } catch (err) {\n                    console.error('Camera error:', err);\n                    setVerificationResult('Camera access denied. Using manual entry.');\n                    setScanMethod('manual');\n                    setCameraActive(false);\n                }\n            };\n            \n            startCamera();\n        }\n    }, [scanMethod, cameraActive]);\n\n    const handleManualInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.toUpperCase();\n        setPlateNumber(value);\n        setVerificationResult(null);\n        setIsValidPlate(validatePlateNumber(value));\n    };\n\n    const handleCapturePlate = () => {\n        // Simulate plate recognition from camera\n        const mockPlates = [\n            { plate: \"ABC123\", valid: true },\n            { plate: \"XYZ789\", valid: true },\n            { plate: \"INVALID\", valid: false },\n            { plate: \"123456\", valid: false }\n        ];\n        \n        const randomPlate = mockPlates[Math.floor(Math.random() * mockPlates.length)];\n        setPlateNumber(randomPlate.plate);\n        setIsValidPlate(randomPlate.valid);\n        \n        if (!randomPlate.valid) {\n            setVerificationResult(\"This doesn't appear to be a valid plate number\");\n        }\n    };\n\n    const handleScan = () => {\n        if (!plateNumber.trim()) {\n            setVerificationResult('Please enter a valid plate number.');\n            setIsValidPlate(false);\n            return;\n        }\n\n        if (!validatePlateNumber(plateNumber)) {\n            setVerificationResult('Invalid plate number format');\n            setIsValidPlate(false);\n            return;\n        }\n\n        // Simulate API verification\n        setTimeout(() => {\n            setVerificationResult(`Vehicle ${plateNumber} verified successfully.`);\n            setIsValidPlate(true);\n            \n            // In a real app, you would:\n            // 1. Send to backend\n            // 2. Add to inspection history\n            // 3. Navigate or show next steps\n        }, 1000);\n    };\n\n    const toggleCamera = () => {\n        const newState = !cameraActive;\n        setCameraActive(newState);\n        if (!newState) {\n            setPlateNumber('');\n            setIsValidPlate(null);\n        }\n    };\n\n    return (\n        <div className=\"scan-container\">\n            <h2 className=\"scan-header\">Vehicle Plate Scanner</h2>\n            \n            <div className=\"scan-method-toggle\">\n                <button\n                    className={`method-btn ${scanMethod === 'camera' ? 'active' : ''}`}\n                    onClick={() => {\n                        setScanMethod('camera');\n                        setPlateNumber('');\n                        setIsValidPlate(null);\n                    }}\n                >\n                    Camera Scan\n                </button>\n                <button\n                    className={`method-btn ${scanMethod === 'manual' ? 'active' : ''}`}\n                    onClick={() => {\n                        setScanMethod('manual');\n                        setCameraActive(false);\n                        setPlateNumber('');\n                        setIsValidPlate(null);\n                    }}\n                >\n                    Manual Entry\n                </button>\n            </div>\n\n            {scanMethod === 'camera' ? (\n                <div className=\"camera-section\">\n                    <div className={`camera-feed ${cameraActive ? 'active' : 'inactive'}`}>\n                        {cameraActive ? (\n                            <>\n                                <video \n                                    ref={videoRef} \n                                    autoPlay \n                                    playsInline \n                                    muted\n                                    className=\"video-preview\"\n                                />\n                                <button \n                                    className=\"capture-btn\"\n                                    onClick={handleCapturePlate}\n                                >\n                                    Capture Plate\n                                </button>\n                            </>\n                        ) : (\n                            <div className=\"camera-placeholder\">\n                                <span className=\"camera-icon\">📷</span>\n                                <p>Camera is off</p>\n                            </div>\n                        )}\n                    </div>\n                    <button \n                        className={`camera-toggle ${cameraActive ? 'active' : ''}`}\n                        onClick={toggleCamera}\n                    >\n                        {cameraActive ? 'Stop Camera' : 'Start Camera'}\n                    </button>\n                </div>\n            ) : (\n                <div className=\"manual-entry\">\n                    <input\n                        type=\"text\"\n                        value={plateNumber}\n                        onChange={handleManualInput}\n                        placeholder=\"Enter plate number (e.g. ABC123)\"\n                        className=\"plate-input\"\n                        autoFocus\n                    />\n                    {plateNumber && isValidPlate !== null && (\n                        <div className={`validation-message ${isValidPlate ? 'valid' : 'invalid'}`}>\n                            {isValidPlate ? '✓ Valid plate format' : '✗ Invalid plate format'}\n                        </div>\n                    )}\n                </div>\n            )}\n\n            <div className=\"action-section\">\n                <button \n                    onClick={handleScan}\n                    className=\"scan-button\"\n                    disabled={!plateNumber.trim() || isValidPlate === false}\n                >\n                    {scanMethod === 'camera' ? 'Verify Plate' : 'Submit Plate'}\n                </button>\n            </div>\n\n            {verificationResult && (\n                <div className={`result-message ${\n                    verificationResult.includes('success') ? 'success' : \n                    verificationResult.includes('Invalid') ? 'error' : 'warning'\n                }`}>\n                    {verificationResult}\n                </div>\n            )}\n\n            <canvas ref={canvasRef} style={{ display: 'none' }} />\n        </div>\n    );\n};\n\nexport default ScanPlate;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}